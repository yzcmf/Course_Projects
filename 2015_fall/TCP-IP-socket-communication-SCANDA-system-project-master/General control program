#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <signal.h>
#include <sys/time.h>

#define MSG_SIZE 40		// message size

void dostuff(int); 			// function prototype
void error(const char *msg)
{
	perror(msg);
	exit(1);
}

struct timeval tv;//set the structure for the gettimeoftheday function

int main(int argc, char *argv[])
{
	int sockfd, newsockfd, portno, pid, j = 0;
	socklen_t clilen;
	struct sockaddr_in serv_addr, cli_addr;

	if (argc < 2) {
		fprintf(stderr,"ERROR, no port provided\n");
		exit(1);
	}

	sockfd = socket(AF_INET, SOCK_STREAM, 0); // Creates socket. Connection based.
	if (sockfd < 0)
		error("ERROR opening socket");

	// fill in fields
	bzero((char *) &serv_addr, sizeof(serv_addr));
	portno = atoi(argv[1]);	// get port number from input
	serv_addr.sin_family = AF_INET;		 // symbol constant for Internet domain
	serv_addr.sin_addr.s_addr = INADDR_ANY; // IP address of the machine on which
	// the server is running
	serv_addr.sin_port = htons(portno);	 // port number

	// binds the socket to the address of the host and the port number
	if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
		error("ERROR on binding");

	listen(sockfd, 5);			// listen for connections
	clilen = sizeof(cli_addr);	// size of structure

	// To allow the server to handle multiple simultaneous connections: infinite
	// loop and fork.
	while (1)
	{
		// blocks until a client connects to the server
		newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
		if (newsockfd < 0)
			error("ERROR on accept");

		j++;		// counter for the connections that are established.
		pid = fork();
		if (pid < 0)
			error("ERROR on fork");

		if (pid == 0)	// child process
		{
			printf("Connection #%d created\n",j);
			close(sockfd);			// close socket
			dostuff(newsockfd);	// call function that handles communication
			exit(0);
		}
		else			// parent
		{
			close(newsockfd);
			signal(SIGCHLD,SIG_IGN);	// to avoid zombie problem
		}
	} 	// end of while

	close(sockfd);
	return 0; 		// we never get here
}

/********************************* DOSTUFF() **********************************
 There is a separate instance of this function for each connection.  It handles
 all communication once a connection has been established.
 *****************************************************************************/

void dostuff (int sock)
{
	while(1)

	{
		int n;

		float buffer[MSG_SIZE]={0.0};

		double time=0.0,t1,t2,time_counter=0.0;

		while(time<=1)
		{
			n = read(sock,buffer,MSG_SIZE-1);

			//printf("The buffer we get from the sock is : %f\n",buffer[0]);

			if (n < 0)
				error("ERROR reading from socket");

			gettimeofday(&tv, NULL);

			t1 = tv.tv_sec+(tv.tv_usec/1000000.0);//get the start time

			//printf("t1 is %f :\n",t1);

			time_counter+=0.009;//set the time certain period 9ms

			if(buffer[0]==1)//buffer[0] is for the overload voltage event
			{

				printf("The overload warning is from the RTU %d in this period.\n",(int)buffer[1]);


				if(buffer[2]!=0)//set the button number 1-4 according to the bit 0-3

					printf("The button %d has been pressed in this period.\n",(int)buffer[2]);

				else

					printf("No button has been pressed in this period.\n");

			}

			else if(buffer[0]==0)
			{

				printf("There is no overload warning from the RTU %d in this period\n",(int)buffer[1]);

				if(buffer[2]!=0)

					printf("The button %d has been pressed in this period.\n",(int)buffer[2]);

				else

					printf("No button has been pressed in this period.\n");

			}


			n = write(sock,buffer,MSG_SIZE-1);

			//Write to the each RTU by the buffer

			if (n < 0)
				error("ERROR writing to socket");

			printf("t1 is %f :\n",t1);

			gettimeofday(&tv, NULL);//find the end time

			t2 = tv.tv_sec+(tv.tv_usec/1000000.0);

			printf("t2 is %f :\n",t2);

			time+=(t2-t1);

			//sum up the time difference,when it is 1s ,the loop is over

			//printf("time difference is %f :\n",time);

			printf("From the time %f to %f:\n",time_counter,time_counter+0.009);

			if(time_counter>=1)

			time_counter=0;//After the while loop we set reset the time_counter to be 0;

			printf("\n");
		}

		printf("\n");

		time=0;//After the while loop we set reset the time to be 0;

		time_counter=0;//After the while loop we set reset the time_counter to be 0;

		n = write(sock,buffer,MSG_SIZE-1);

		//Write to the each RTU by the buffer

		if (n < 0)
			//
			error("ERROR writing to socket");

	}
}

