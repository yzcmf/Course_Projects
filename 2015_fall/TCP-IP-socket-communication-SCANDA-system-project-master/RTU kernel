/*
 ============================================================================
 Name        : project_RTU_ker.c
 Author      : zyx
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

//For this module I am going to do the 2 ADC and the 4 buttons pressed.
//Do the sampling here and send the records to the RTU user program.

#ifndef MODULE
#define MODULE
#endif

#ifndef __KERNEL__
#define __KERNEL__
#endif

#include <linux/module.h>
#include <linux/kernel.h>
#include <asm/io.h>
#include <rtai.h>
#include <rtai_sched.h>
#include <rtai_fifos.h>
#include <linux/irq.h>
#include <linux/interrupt.h>
#include <linux/time.h>


MODULE_LICENSE("GPL");

char *ADC_write;
char *ADC_install;
char *ADC_complete;
short *ADC_read_LSB;

int voltage;//Sampling the voltage through the analog signals and get the digital values

static RT_TASK ADC_task;
RTIME period;


int hard_irq_num = 59;//use hardware interrupt Line 59

//registers pointers

unsigned long *PBDDR;
unsigned long *PFDR;
unsigned long *PFDDR;

unsigned long *GPIOBIntEn;
unsigned long *GPIOBIntType1;
unsigned long *GPIOBIntType2;
unsigned long *GPIOBIntEOI;
unsigned long *IntStsB;



//In this module,I am going to do the two ADCs.
//And I am going to detect the states of 4-buttons.


static void hardware_process(unsigned irq_num, void *cookie)

{

	printk ("Hardware Handler is called.\n");

	int button_state[4]={0};//Keep records to the button-pressed states

		rt_disable_irq (irq_num);

		int button;

		if (*IntStsB & 1 << 0)// For button 1,if it is ture,then the button 1 has been pressed
		{

			button = 0;

			button_state[0]=1;

		}
		else if (*IntStsB & 1 << 1)
		{
			button = 1;
			button_state[1]=1;
		}

		else if (*IntStsB & 1 << 2)
		{
			button = 2;
			button_state[2]=1;

			//printk ("The state of the button %d is %d,\n",button, button_state[2]);
		}

		else if (*IntStsB & 1 << 3)
		{
			button = 3;
			button_state[3]=1;

			//printk ("The state of the button %d is %d,\n",button, button_state[3]);
		}

		rtf_put(1, &button_state, sizeof (button_state));//send the states to the RTU usr-space through fifo_1

		*GPIOBIntEOI|=0x1F;// 0001 1111 let the buttons's interrupts be cleared off

		rt_enable_irq (irq_num);

}

static void rt_process(int t){

	int i;
	printk("RT-process has been called.\n");


	if((*ADC_install & 0x01) == 0x01)//When the A/D option is installed,bit 0 is equal to 1
	{
		printk("ADC is installed\n");

		while(1)
		{
			*ADC_write = 0x40;//1111 0100 0000 we choose the ch0 as the input and the uni-polar 5v range
			rt_task_wait_period(); //Wait 1ms until the next sampling is going to start

			while((*ADC_complete & 0x80) != 0x00) // When the ADC conversion is done,bit 7 is equal to 0,we start the next sampling
			{
				rt_task_wait_period();
			}

			voltage= (int)*ADC_read_LSB;

			//printk("The voltage we get from the 5v we assumed is %d\n",voltage);

			//send to the user programming through the fifo_0

			rtf_put(0, &voltage, sizeof (voltage));


		}
	}
	else
		printk("ADC is NOT installed\n");

}
int init_module(void)
{

	printk ("The new KERNEL MODULE INSTALL\n");

	/////////////////// For the ADC conversion /////////////////////////


	ADC_write=(char *)__ioremap(0x10F00000,4096,0);//For register 0x10F00000
	ADC_install = (char *)__ioremap(0x22400000,4096,0);
	ADC_complete=(char *)__ioremap(0x10800000,4096,0);//For register 0x10800000
	ADC_read_LSB = (short *)ADC_write;

	//set the registers

	unsigned long *GPOI_ptr=(unsigned long *)__ioremap(0x80840000,4096,0);

	PBDDR=GPOI_ptr+5;//dir register

	*PBDDR=*PBDDR&0xFFFFFFE0;//1111 1111 1110 0000

	//PBDR=GPOI_ptr+1;//data register

	PFDDR=GPOI_ptr+13;//dir register

	*PFDDR=*PFDDR|0x01;//0000 0000 0000 0010

	PFDR=GPOI_ptr+12;//dir register

	GPIOBIntEn=GPOI_ptr+46;//interrupt register

	*GPIOBIntEn=*GPIOBIntEn|0x1F;//0000 0000 0001 1111--enable the buttons

	GPIOBIntType1=GPOI_ptr+43; //interrupt register

	*GPIOBIntType1=*GPIOBIntType1|0x1F;//0000 0000 0001 1111--edge

	GPIOBIntType2=GPOI_ptr+44;//interrupt register

	*GPIOBIntType2=*GPIOBIntType2|0x1F;//0000 0000 0001 1111--rising

	GPIOBIntEOI=GPOI_ptr+45;//interrupt register

	*GPIOBIntEOI=*GPIOBIntEOI|0x1F;//0000 0000 0001 1111--clean the buttons

	IntStsB=GPOI_ptr+47; //data register

	rt_request_irq (hard_irq_num, hardware_process, 0, 1);//request the hardware interrupt

	rt_enable_irq (hard_irq_num);//enable the hardware interrupt

	rt_set_periodic_mode();

	rtf_create(0, sizeof(int)); 	//fifo_0 is used to send the voltage datas to the RTU user-space

	rtf_create(1, sizeof(int)); 	//fifo 1 is used to send the button-states to the user-space

	printk ("RTU kernel MODULE INSTALLED\n");

	rt_task_init(&ADC_task,rt_process,0,256, 0, 0, 0);//Initial the ADC real time task

	period=start_rt_timer(nano2count(100000));//internal period is 0.1 ms

	rt_task_make_periodic(&ADC_task,rt_get_time(), 10*period);//internal task period is 1 ms


	//////////////// ADC conversion part has been done ///////////////////////

	return 0;

}

void cleanup_module(void){

	//For ADC

	rtf_destroy(0);//clear ADC fifo

	rt_task_delete(&ADC_task);//delete the ADC task

	//For the button-states

	rt_release_irq (hard_irq_num);//release the hardware interrupt to the system

	rtf_destroy(1);//clear button-pressed fifo

	stop_rt_timer();

	__iounmap(ADC_write);
	__iounmap(ADC_install);
	__iounmap(ADC_complete);

	printk ("ADC task MODULE REMOVED\n");
}



